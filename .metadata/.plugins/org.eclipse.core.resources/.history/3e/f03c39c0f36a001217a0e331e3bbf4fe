package dk.fastaval.fastavappen.fragments;

import java.util.ArrayList;
import java.util.Arrays;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;
import dk.fastaval.fastavappen.Constants;
import dk.fastaval.fastavappen.R;
import dk.fastaval.fastavappen.data.GroupRowData;
import dk.fastaval.fastavappen.data.ProgramActivityData;
import dk.fastaval.fastavappen.data.ProgramData;
import dk.fastaval.fastavappen.service.ProgramIntentService;
import dk.fastaval.fastavappen.util.SherlockExpandableListFragment;

public class ProgramFragment extends SherlockExpandableListFragment implements OnCheckedChangeListener {

	private Context mContext;
	
	private ArrayList<GroupRowData> groupItems;
	private ArrayList<ArrayList<ProgramActivityData>> childItems = new ArrayList<ArrayList<ProgramActivityData>>();
	
	private ToggleButton tgbRole, tgbBoard, tgbLive, tgbOther;

	private SharedPreferences preferences;
	private SharedPreferences.Editor editor;
	
	private Messenger messenger;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		preferences = getActivity().getSharedPreferences(Constants.FASTA_PREFERENCES, Context.MODE_PRIVATE);
		editor = preferences.edit();
		
		mContext = getActivity();
		
		messenger = new Messenger(mHandler);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.program_fragment, container,
				false);
		return view;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		ExpandableListView expandbleList = getExpandableListView();
		expandbleList.setClickable(true);
		expandbleList.setOnChildClickListener(this);
				
		// Ready the intent with information for the service
	    Intent intent = new Intent(getActivity(), ProgramIntentService.class);
	    intent.putExtra(Constants.MESSENGER_EXTRA, messenger);
	    getActivity().startService(intent);
	    
	    tgbRole = (ToggleButton) getView().findViewById(R.id.tgb_role);
	    tgbBoard = (ToggleButton) getView().findViewById(R.id.tgb_board);
	    tgbLive = (ToggleButton) getView().findViewById(R.id.tgb_live);
	    tgbOther = (ToggleButton) getView().findViewById(R.id.tgb_other);

	    tgbRole.setOnCheckedChangeListener(this);
	    tgbBoard.setOnCheckedChangeListener(this);
	    tgbLive.setOnCheckedChangeListener(this);
	    tgbOther.setOnCheckedChangeListener(this);

	    ArrayList<String> excludes = new ArrayList<String>();
		if(!preferences.getString(Constants.FASTA_PROGRAM_EXCLUDE, "").isEmpty()) {
			excludes = new ArrayList<String>(Arrays.asList((preferences.getString(Constants.FASTA_PROGRAM_EXCLUDE, "").split(","))));
		}
		if(excludes.contains(Constants.TYPE_ROLE))
			tgbRole.setChecked(false);
		if(excludes.contains(Constants.TYPE_BOARD))
			tgbBoard.setChecked(false);
		if(excludes.contains(Constants.TYPE_LIVE))
			tgbLive.setChecked(false);
		if(excludes.contains(Constants.TYPE_OTHER))
			tgbOther.setChecked(false);
	}

	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		switchToggleButtons(false);
		getView().findViewById(R.id.pb_program).setVisibility(View.VISIBLE);
		
	    Intent intent = new Intent(getActivity(), ProgramIntentService.class);
	    intent.putExtra(Constants.MESSENGER_EXTRA, messenger);
	    
	    String exclude = tgbRole.isChecked() == true ? "" : Constants.TYPE_ROLE;
	    
	    if(exclude.isEmpty()) {
	    	exclude = tgbBoard.isChecked() == true ? "" : Constants.TYPE_BOARD;
		    if(exclude.isEmpty()) {
		    	exclude = tgbLive.isChecked() == true ? "" : Constants.TYPE_LIVE;
			    if(exclude.isEmpty())
			    	exclude = tgbOther.isChecked() == true ? "" : Constants.TYPE_OTHER;
		    } else {
			    exclude += "," + (tgbLive.isChecked() == true ? "" : Constants.TYPE_LIVE);
			    exclude += "," + (tgbOther.isChecked() == true ? "" : Constants.TYPE_OTHER);
		    }
	    } else {
	    	exclude += "," + (tgbBoard.isChecked() == true ? "" : Constants.TYPE_BOARD);
		    exclude += "," + (tgbLive.isChecked() == true ? "" : Constants.TYPE_LIVE);
		    exclude += "," + (tgbOther.isChecked() == true ? "" : Constants.TYPE_OTHER);
	    }
	    
		editor.putString(Constants.FASTA_PROGRAM_EXCLUDE, exclude);
		editor.commit();
		
	    getActivity().startService(intent);
	}

	public CharSequence getTitle() {
		return getText(R.string.title_fastaval_program);
	}
	
	private void switchToggleButtons(boolean enabled) {
		tgbRole.setEnabled(enabled);
	    tgbBoard.setEnabled(enabled);
	    tgbLive.setEnabled(enabled);
	    tgbOther.setEnabled(enabled);
	}
	
	private final Handler mHandler = new Handler() {
	    @Override
	    public void handleMessage(Message msg) {
    		groupItems = ((ProgramData) msg.obj).groupItems;
    		childItems = ((ProgramData) msg.obj).childItems;
    		
    		getView().findViewById(R.id.pb_program).setVisibility(View.GONE);
    		switchToggleButtons(true);
    		ProgramAdapter mProgramAdapter = new ProgramAdapter(groupItems, childItems);
    		mProgramAdapter
    				.setInflater(
    						(LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE),
    						getActivity());
    		getExpandableListView().setAdapter(mProgramAdapter);
    	}
	};

	public class ProgramAdapter extends BaseExpandableListAdapter {

		public ArrayList<GroupRowData> mGroupItems;
		public ArrayList<ProgramActivityData> mTempChilds;
		public ArrayList<ArrayList<ProgramActivityData>> mChildItems = new ArrayList<ArrayList<ProgramActivityData>>();
		public LayoutInflater mInflater;
		public Activity activity;

		public ProgramAdapter(ArrayList<GroupRowData> grList,
				ArrayList<ArrayList<ProgramActivityData>> childItem) {
			mGroupItems = grList;
			this.mChildItems = childItem;
		}

		public void setInflater(LayoutInflater mInflater, Activity act) {
			this.mInflater = mInflater;
			activity = act;
		}

		@Override
		public Object getChild(int arg0, int arg1) {
			return null;
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return 0;
		}

		@Override
		public View getChildView(int groupPosition, final int childPosition,
				boolean isLastChild, View convertView, ViewGroup parent) {
			mTempChilds = mChildItems.get(groupPosition);
			ProgramActivityData child = mTempChilds.get(childPosition);
			
			TextView title = null;
			ImageView type = null;
			
			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.childrow, null);
			}
			
			title = (TextView) convertView.findViewById(R.id.tv_title);
			title.setText(child.info.title_da);
			
			type = (ImageView) convertView.findViewById(R.id.childImage);

			if(child.info.type.matches(Constants.TYPE_ROLE))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_role_otto));
			else if(child.info.type.matches(Constants.TYPE_BOARD))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_board_otto));
			else if(child.info.type.matches(Constants.TYPE_LIVE))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_live_otto));
			else if(child.info.type.matches(Constants.TYPE_OTHER))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_other_otto));
			
			convertView.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Toast.makeText(activity, mTempChilds.get(childPosition).info.title_da,
							Toast.LENGTH_SHORT).show();
				}
			});
			return convertView;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			return mChildItems.get(groupPosition).size();
		}

		@Override
		public Object getGroup(int groupPosition) {
			return null;
		}

		@Override
		public int getGroupCount() {
			return mGroupItems.size();
		}

		@Override
		public void onGroupCollapsed(int groupPosition) {
			super.onGroupCollapsed(groupPosition);
		}

		@Override
		public void onGroupExpanded(int groupPosition) {
			super.onGroupExpanded(groupPosition);
		}

		@Override
		public long getGroupId(int groupPosition) {
			return 0;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.grouprow, null);
			}
			
			mTempChilds = mChildItems.get(groupPosition);
			
			TextView title = (TextView) convertView.findViewById(R.id.tv_exp_title);
			TextView count = (TextView) convertView.findViewById(R.id.tv_exp_count);
			
			View role = convertView.findViewById(R.id.v_role);
			View board = convertView.findViewById(R.id.v_board);
			View live = convertView.findViewById(R.id.v_live);
			View other = convertView.findViewById(R.id.v_other);
			
			title.setText(mGroupItems.get(groupPosition).Title);
			count.setText(mTempChilds.size() + "");
			
			role.setVisibility(View.INVISIBLE);
			board.setVisibility(View.INVISIBLE);
			live.setVisibility(View.INVISIBLE);
			other.setVisibility(View.INVISIBLE);
			
			for(ProgramActivityData PAD : mTempChilds) {
				if(PAD.info.type.matches(Constants.TYPE_ROLE))
					role.setVisibility(View.VISIBLE);
				else if(PAD.info.type.matches(Constants.TYPE_BOARD))
					board.setVisibility(View.VISIBLE);
				else if(PAD.info.type.matches(Constants.TYPE_LIVE))
					live.setVisibility(View.VISIBLE);
				else if(PAD.info.type.matches(Constants.TYPE_OTHER))
					other.setVisibility(View.VISIBLE);
			}
			
			return convertView;
		}

		@Override
		public boolean hasStableIds() {
			return false;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return false;
		}

	}
}

package dk.fastaval.fastavappen.fragments;

import java.io.IOException;
import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.JsonSyntaxException;

import dk.fastaval.fastavappen.Constants;
import dk.fastaval.fastavappen.R;
import dk.fastaval.fastavappen.business.ProgramHelper;
import dk.fastaval.fastavappen.data.GroupRowData;
import dk.fastaval.fastavappen.data.ProgramActivity;
import dk.fastaval.fastavappen.util.SherlockExpandableListFragment;

public class ProgramFragment extends SherlockExpandableListFragment implements OnChildClickListener {

	ArrayList<GroupRowData> groupItems;
	ArrayList<ArrayList<ProgramActivity>> childItems = new ArrayList<ArrayList<ProgramActivity>>();

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
	}

	@Override
	public boolean onChildClick(ExpandableListView parent, View v,
			int groupPosition, int childPosition, long id) {
		Toast.makeText(getActivity(), "Clicked On Child",
				Toast.LENGTH_SHORT).show();
		return true;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		Drawable icon = getResources().getDrawable(R.drawable.expand_icon);
		
		ExpandableListView expandbleList = getExpandableListView();
		expandbleList.setDividerHeight(2);
		expandbleList.setGroupIndicator(icon);
		expandbleList.setClickable(true);

		ProgramHelper PH = new ProgramHelper(getActivity());
		try {
			groupItems = PH.getTimeBlocks();
			for(GroupRowData GRD : groupItems) {
				childItems.add(PH.getTimeBlocksElements(GRD));
			}
		} catch (JsonSyntaxException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		ProgramAdapter mProgramAdapter = new ProgramAdapter(groupItems, childItems);
		mProgramAdapter
				.setInflater(
						(LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE),
						getActivity());
		getExpandableListView().setAdapter(mProgramAdapter);
		expandbleList.setOnChildClickListener(this);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.program_fragment, container,
				false);
		return view;
	}

	public CharSequence getTitle() {
		return getText(R.string.title_fastaval_program);
	}

	public class ProgramAdapter extends BaseExpandableListAdapter {

		public ArrayList<GroupRowData> mGroupItems;
		public ArrayList<ProgramActivity> tempChilds;
		public ArrayList<ArrayList<ProgramActivity>> mChildItems = new ArrayList<ArrayList<ProgramActivity>>();
		public LayoutInflater mInflater;
		public Activity activity;

		public ProgramAdapter(ArrayList<GroupRowData> grList,
				ArrayList<ArrayList<ProgramActivity>> childItem) {
			mGroupItems = grList;
			this.mChildItems = childItem;
		}

		public void setInflater(LayoutInflater mInflater, Activity act) {
			this.mInflater = mInflater;
			activity = act;
		}

		@Override
		public Object getChild(int arg0, int arg1) {
			return null;
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return 0;
		}

		@Override
		public View getChildView(int groupPosition, final int childPosition,
				boolean isLastChild, View convertView, ViewGroup parent) {
			tempChilds = mChildItems.get(groupPosition);
			ProgramActivity child = tempChilds.get(childPosition);
			
			TextView title = null;
			ImageView type = null;
			
			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.childrow, null);
			}
			
			title = (TextView) convertView.findViewById(R.id.tv_title);
			title.setText(child.info.title_da);
			
			type = (ImageView) convertView.findViewById(R.id.childImage);

			if(child.info.type.matches(Constants.TYPE_ROLE))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_role_otto));
			else if(child.info.type.matches(Constants.TYPE_BOARD))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_board_otto));
			else if(child.info.type.matches(Constants.TYPE_LIVE))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_live_otto));
			else if(child.info.type.matches(Constants.TYPE_OTHER))
				type.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.ic_other_otto));
			
			convertView.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					Toast.makeText(activity, tempChilds.get(childPosition).info.title_da,
							Toast.LENGTH_SHORT).show();
				}
			});
			return convertView;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			return mChildItems.get(groupPosition).size();
		}

		@Override
		public Object getGroup(int groupPosition) {
			return null;
		}

		@Override
		public int getGroupCount() {
			return mGroupItems.size();
		}

		@Override
		public void onGroupCollapsed(int groupPosition) {
			super.onGroupCollapsed(groupPosition);
		}

		@Override
		public void onGroupExpanded(int groupPosition) {
			super.onGroupExpanded(groupPosition);
		}

		@Override
		public long getGroupId(int groupPosition) {
			return 0;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parent) {
			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.grouprow, null);
			}
			TextView title = (TextView) convertView.findViewById(R.id.tv_exp_title);
			TextView count = (TextView) convertView.findViewById(R.id.tv_exp_count);
			
			title.setText(mGroupItems.get(groupPosition).Title);
			count.setText((mChildItems.get(groupPosition)).size() + "");
			
			return convertView;
		}

		@Override
		public boolean hasStableIds() {
			return false;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return false;
		}

	}
}
